ConstraintView.swift
	public struct ConstraintAxis
	public protocol ConstraintView: class
	public protocol ConstraintView : class
Setup.swift
	public protocol Setup {}
	public protocol Setup
CloudManager.swift
	public protocol CloudRelation
	public protocol CloudRelation
	public protocol CloudObject: Hashable
	public protocol CloudObject : Hashable
	public func == <T: CloudObject>(lhs: T, rhs: T) -> Bool
	public class CloudManager
Arbitrary.swift
	public protocol Arbitrary
	public static func arbitrary() -> Int
	public static func arbitrary() -> Character
StreamClient.swift
	public class StreamClient: NSObject
	public class StreamClient : NSObject
TableView.swift
	public class TableView<T, C: UITableViewCell>: UITableView, UITableViewDataSource
TextView.swift
	public class TextView: UIControl
TableController.swift
	public class TableController<T, C: UITableViewCell>: UITableViewController
UIView+.swift
	public func overrideLayoutSubviews(block: Void -> Void)
	public override class func initialize()
	public func addConstraintsWithVisualFormat(views: [String: UIView], metrics: [String: AnyObject]? = nil)(format: String)
	public func addConstraint(item view1: AnyObject, attribute attr1: NSLayoutAttribute, relatedBy relation: NSLayoutRelation, toItem view2: AnyObject?, attribute attr2: NSLayoutAttribute, multiplier: CGFloat, constant c: CGFloat)
CollectionView.swift
	public class CollectionView<T, C: UICollectionViewCell>: UICollectionView, UICollectionViewDataSource
SimpleTransition.swift
	final public class SimpleTransition: TransitionDelegate
OpenWeather.swift
	public class OpenWeather
WeatherIcon.swift
	public enum WeatherIcon: String
	public enum WeatherIcon : String
NSRange+.swift
	public func == (lhs: NSRange, rhs: NSRange) -> Bool
StackView.swift
	public class StackView: UIView
TaskManager.swift
	final public class TaskManager
DynamicCell.swift
	public class DynamicCell<V: UIView where V: Setup>: UICollectionViewCell
SymbolIcon.swift
	public enum SymbolIcon: Character
	public enum SymbolIcon : Character
Drawing.swift
	public let PI = CGFloat(M_PI)
UICollectionView+.swift
	final func setupMultiSelection()
	final func cellHandleAtIndexPath<T>(indexPath: NSIndexPath, handle: T -> Void)
	final func forwardIndexPath(indexPath: NSIndexPath) -> NSIndexPath?
	final func backwardIndexPath(indexPath: NSIndexPath) -> NSIndexPath?
UIScrollView+.swift
	final var bottomContentOffset: CGPoint
UILabel+.swift
	public static var sharedInstance: UILabel
	public func heightForText(font: UIFont)(text: String)(width: CGFloat) -> CGFloat
DateIndex.swift
	public struct DateIndex
	public func == (lhs: DateIndex, rhs: DateIndex) -> Bool
	public func < (lhs: DateIndex, rhs: DateIndex) -> Bool
	public struct DateIndex
	public struct DateIndex
	public struct DateIndex
UITableView+.swift
	final func isSectionValid(section: Int) -> Bool
	final func cellHandleAtIndexPath<T>(indexPath: NSIndexPath, handle: T -> Void)
	final func forwardIndexPath(indexPath: NSIndexPath) -> NSIndexPath?
	final func backwardIndexPath(indexPath: NSIndexPath) -> NSIndexPath?
String+.swift
	public func stringByRemovingSpecialCharacters() -> String
	mutating public func removeSpecialCharacters()
	public func isIPAddress() -> Bool
PresentationController.swift
	public class PresentationController: UIPresentationController
UIControl+.swift
	final func addAction(block: UIControl -> Void, forControlEvents events: UIControlEvents)
PersistentStack.swift
	public class PersistentStack
Queueing.swift
	public struct Global
Box.swift
	public class Box<T>
RowField.swift
	public protocol RowFieldDelegate: class
	public class RowField: UITableViewCell, FadePlaceholder
	public class RowField : UITableViewCell, FadePlaceholder
TimeSystem.swift
	public class TimeSystem
TransitionDelegate.swift
	public protocol TransitionAnimation: class
	@objc public protocol TransitionAlongside: class
	public class TransitionDelegate: UIPercentDrivenInteractiveTransition
	public class TransitionDelegate : UIPercentDrivenInteractiveTransition
	public class TransitionDelegate : UIPercentDrivenInteractiveTransition
Range+.swift
	public func random() -> Element
	public func rangeByOffset(value: Int) -> Range
FadePlaceholder.swift
	public protocol FadePlaceholder: class
	public protocol FadePlaceholder : class
FileError.swift
	public enum FileError: ErrorType
LoremIpsum.swift
	public final class LoremIpsum
	public final class LoremIpsum
CGPoint+.swift
	public func CGPointDistanceFrom(fromPoint p1: CGPoint, toPoint p2: CGPoint) -> CGFloat
